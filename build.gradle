import java.text.SimpleDateFormat
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
    }
}

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR8"
    }
}

group = 'com.wejuai'
version = '1.0.0'
sourceCompatibility = '11'

repositories {
    maven { url 'https://maven.aliyun.com/repository/central' }
    mavenLocal()
}

configurations.all {
    //启用新标签
    canBeResolved = true
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-config-server'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

ext {
    dockerImageName = 'registry.cn-beijing.aliyuncs.com/wzm/wejuai-config-server:' + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
}

docker {
    registryCredentials {
        url = 'https://registry.cn-beijing.aliyuncs.com'
        username = project.hasProperty('myDockerUser') ? project.property('myDockerUser') : '<myDockerUser>'
        password = project.hasProperty('myDockerPassword') ? project.property('myDockerPassword') : '<myDockerPassword>'
    }
}

task dockerBuild(type: DockerBuildImage, dependsOn: bootJar) {
    copy {
        from("src/main/docker/Dockerfile")
        into("build")
    }
    inputDir = file('build')
    images.add(dockerImageName)
}

task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
    images.add(dockerImageName)
}

// 清除现有的lib目录
task clearJar(type: Delete) {
    delete "$buildDir/libs/lib"
}

// 将依赖包复制到lib目录
task copyJar(type: Copy, dependsOn: clearJar) {
    from configurations.implementation
    into "$buildDir/libs/lib"
}

//重写spring bootJar
bootJar {
    archivesBaseName = project.name
    archiveVersion = project.version
    // 例外所有的jar和配置文件
    excludes = ["*.jar"]
    // lib目录的清除和复制任务
    dependsOn copyJar
    // 指定依赖包的路径
    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path': configurations.implementation.files.collect { "lib/$it.name" }.join(' ')
    }
}